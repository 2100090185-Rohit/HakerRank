Given a 2D grid consists of 0s (land) and 1s (water). An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

Input Format

The First line contains two integers denoting the value of n and m
The Next N lines contains M integers denoting the elements of the matrix.
Constraints

1 <= grid.length, grid[0].length <= 100
0 <= grid[i][j] <=1
Output Format

Print a integer which is the answer to the question.

Sample Input 0
3 5
0 0 1 0 0
0 1 0 1 0
0 1 1 1 0

Sample Output 0
1

Sample Input 1
3 4
1 0 1 1 
1 1 1 1 
1 1 1 1 

Sample Output 1
0






--------------------------------------------------





#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;



void dfs(vector<vector<int>>& grid, int i, int j) {
    int rows = grid.size();
    int cols = grid[0].size();

    if (i >= 0 && i < rows && j >= 0 && j < cols && grid[i][j] == 0) {
        grid[i][j] = 1;  

        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
}

int closedIsland(vector<vector<int>>& grid) {
    int rows = grid.size();
    int cols = grid[0].size();

    for (int i = 0; i < rows; ++i) {
        dfs(grid, i, 0);
        dfs(grid, i, cols - 1);
    }

    for (int j = 0; j < cols; ++j) {
        dfs(grid, 0, j);
        dfs(grid, rows - 1, j);
    }

    int closedIslands = 0;
    for (int i = 1; i < rows - 1; ++i) {
        for (int j = 1; j < cols - 1; ++j) {
            if (grid[i][j] == 0) {
                dfs(grid, i, j);
                closedIslands++;
            }
        }
    }

    return closedIslands;
}

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<int>> grid(n, vector<int>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> grid[i][j];
        }
    }

    int result = closedIsland(grid);
    cout << result << endl;

    return 0;
}



