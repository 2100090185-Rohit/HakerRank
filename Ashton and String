#include <algorithm>
#include <iostream>
#include <cstring>
#include <complex>
#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <string>
#include <cmath>
#include <ctime>
#include <queue>
#include <list>
#include <map>
#include <set>

#define all(x) (x).begin(), (x).end()
#define type(x) __typeof((x).begin())
#define foreach(it,x) for(__typeof(x.begin()) it = x.begin() ; it!=x.end() ; it++ )

#ifdef KAZAR
    #define eprintf(...) fprintf(stderr,__VA_ARGS__)
#else
    #define eprintf(...) 0
#endif

using namespace std;

template<class T> inline void umax(T &a,T b){if(a<b) a = b ; }
template<class T> inline void umin(T &a,T b){if(a>b) a = b ; }
template<class T> inline T abs(T a){return a>0 ? a : -a;}
template<class T> inline T gcd(T a,T b){return __gcd(a, b);}
template<class T> inline T lcm(T a,T b){return a/gcd(a,b)*b;}

const int inf = 1e9 + 143;
const long long longinf = 1e18 + 143;

inline int read(){int x;scanf(" %d",&x);return x;}

const int N = 101001;

char s[N];
int rnk[N];
int sa[N];
int lcp[N];
pair<pair<int, int>, int> p[N];

void solve(){

    scanf(" %s",s + 1);
    int n = strlen(s + 1);
    long long kth;
    cin >> kth;

    for(int i = 1; i <= n; i++) rnk[i] = s[i] - 'a' + 1;
    for(int g = 1; g <= n; g <<= 1){
        for(int i = 1; i <= n; i++){
            p[i] = make_pair(make_pair(rnk[i], ((i + g) > n)? 0 : rnk[i + g]), i);
        }
        sort(p + 1, p + 1 + n);
        int ptr = 1;
        for(int i = 1; i <= n; i++){
            if(i > 1 && p[i].first != p[i - 1].first)
                ++ptr;
            rnk[p[i].second] = ptr;
        }
    }

    for(int i = 1; i <= n; i++) sa[rnk[i]] = i;

    int cur = 0;
    for(int i = 1; i <= n; i++){
        if(rnk[i] == n)
            continue;
        int next = sa[rnk[i] + 1];
        while(i + cur <= n && next + cur <= n && s[i + cur] == s[next + cur])
            ++cur;
        lcp[rnk[i]] = cur;
        if(cur > 0)
            --cur;
    }
    lcp[n] = 0;
    lcp[0] = 0;

    long long sum = 0;
    for(int i = 1; i <= n; i++){
        eprintf("::%d\n",sa[i]);
        long long len = n - sa[i] + 1;
        long long d = 0;
        d += len * (len + 1) / 2ll;
        d -= 1ll * lcp[i - 1] * (lcp[i - 1] + 1) / 2ll;
        if(sum + d >= kth){
            for(int j = lcp[i - 1] + 1; j <= len; j++){
                sum += j;
                if(sum >= kth){
                    sum -= j;
                    eprintf("i : %d, j : %d\n",i,j);
                    printf("%c\n",s[sa[i] + (kth - sum) - 1]);
                    return;
                }
            }
        }
        sum += d;
    }

}

int main(){

#ifdef KAZAR
    freopen("f.input","r",stdin);
    freopen("f.output","w",stdout);
    freopen("error","w",stderr);
#endif

    int tc = read();
    while(tc--){
        solve();
    }

    return 0;
}



